apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: myspacecomposition
spec:
  compositeTypeRef:
    apiVersion: arpan.io/v1alpha1
    kind: XMySpace
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
          - name: customSpace
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                providerConfigRef:
                  name: kubernetes-provider
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Namespace
                    env:
                      - "test"
                      - "tuk"
                      - "col"
            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: spec.name
                toFieldPath: spec.forProvider.manifest.metadata.name
              - type: FromCompositeFieldPath
                fromFieldPath: metadata.labels['crossplane.io/claim-name']
                toFieldPath: metadata.name
              - type: FromCompositeFieldPath
                fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
                toFieldPath: metadata.namespace
    - step: generate-name
      functionRef:
        name: function-with-condition
      input:
        apiVersion: renault.fn.crossplane.io/v1beta1
        kind: PatchWithCondition
        config:
          objects:
          - name: customSpace
            sourceFieldPath: "spec.forProvider.manifest.metadata.name"
            destinationFieldPath: "spec.forProvider.manifest.spec.containers[0].name"
            matchValue: "test"
            fieldValue: "test-tuk"
            condition: Equals
#          - name: customSpace
#            sourceFieldPath: "spec.forProvider.manifest.env"
#            destinationFieldPath: "spec.forProvider.manifest.spec.containers[0].name"
#            matchValue: "test"
#            fieldValue: "test-tuk-tuk-tuk"
#            condition: In
          - name: customSpace
            sourceFieldPath: "spec.forProvider.manifest.env"
            destinationFieldPath: "spec.forProvider.manifest.spec.containers[0].name"
            matchValue: "test"
            fieldValue: "test-tuk-tuk-tuk"
            condition: NotIn
